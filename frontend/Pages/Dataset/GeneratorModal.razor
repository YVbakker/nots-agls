@using frontend.Components
@using frontend.Models
@inject RepositoryService _repositoryService
@inject KeywordService _keywordService
@inject DatasetService _datasetService;

<Modal @ref="modal">
    <Title>
        Generate Labeled Data
    </Title>

    <Body>
    <EditForm Model="_config">
        <label>Select repository</label>
        <InputSelect @bind-Value="_config.GitRepoId">
            @if (gitRepositories == null || gitRepositories.Count < 1)
            {
                <option value="" disabled selected>No repositories available</option>
            }
            else
            {
                @foreach (var gitRepository in gitRepositories)
                {
                    <option value="@gitRepository.Id">@gitRepository.Name</option>
                }
            }
        </InputSelect><br/>
        <label>Select keywords</label>
        <InputSelect @bind-Value="_config.KeywordSetId">
            @if (keywordSets == null || keywordSets.Count < 1)
            {
                <option value="" disabled selected>No keywords sets available</option>
            }
            else
            {
                @foreach (var keywordSet in keywordSets)
                {
                    <option value="@keywordSet.Id">@keywordSet.Name</option>
                }
            }
        </InputSelect><br/>
        <label>Exclude Keyword</label>
        <InputCheckbox DisplayName="ExcludeKeyword" @bind-Value="_config.ExcludeKeyword"></InputCheckbox><br/>
        <label>Balance Output</label>
        <InputCheckbox DisplayName="BalanceOutput" @bind-Value="_config.BalanceOutput"></InputCheckbox>
    </EditForm>
    </Body>

    <Footer>
        <button type="button" @onclick="HandleGenerateData" class="btn btn-primary">
            <span
                class="oi oi-audio-spectrum me-1">
            </span> Generate
        </button>
    </Footer>
</Modal>


@code {

    [Parameter]
    public int Id { get; set; }

    private Modal modal { get; set; }

    public void Open()
    {
        modal.Open();
    }

    protected AutoLabelConfig _config { get; set; }

    private List<Repository>? gitRepositories { get; set; }
    private List<KeywordSet>? keywordSets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _config = new AutoLabelConfig {DatasetId = Id};

        gitRepositories = await _repositoryService.Get();
        if (gitRepositories == null || gitRepositories.Count < 1)
        {
            _config.GitRepoId = 0;
        }
        else
        {
            _config.GitRepoId = gitRepositories.First().Id;
        }

        keywordSets = await _keywordService.Get();
        if (keywordSets == null || keywordSets.Count < 1)
        {
            _config.KeywordSetId = 0;
        }
        else
        {
            _config.KeywordSetId = keywordSets.First().Id;
        }
    }

    protected async void HandleGenerateData()
    {
        await _datasetService.AutoLabel(_config);
        modal.Close();
    }

}