@page "/openai"
@using BlazorDownloadFile
@using System.Text

<PageTitle>OpenAI Sandbox | AGLS</PageTitle>

@inject OpenAIService OpenAIService
@inject IBlazorDownloadFileService BlazorDownloadFileService;

<div class="row my-3">
    <nav aria-label="breadcrumb" class="d-flex flex-row justify-content-between align-items-center">
        <ol class="breadcrumb m-0">
            <li class="breadcrumb-item">
                <a href="/">Home</a>
            </li>
            <li class="breadcrumb-item" aria-current="page">OpenAI</li>
            <li class="breadcrumb-item active" aria-current="page">View All</li>
        </ol>
    </nav>
</div>

<div class="card mb-3">
    <h5 class="card-header text-white bg-primary">Git commit message</h5>
    <div class="card-body">
        <p>
            Paste a git commit message here and click on the buttons in the cards below to run the text throught an AI.
        </p>
        <textarea @bind="@gitCommitMessage" class="form-control" id="extractionInput" rows="3"
            placeholder="Paste a git commit message here">
        </textarea>
    </div>
</div>

<div class="card mb-3">
    <h5 class="card-header text-white bg-secondary">Text extraction</h5>
    <div class="card-body">
        <p>Extract the reasons of the changes made in given commit.</p>

        @if (extractionError != null)
        {
            <div class="alert alert-danger p-2" role="alert">
                <span class="oi oi-warning"></span> @extractionError
            </div>
        }

        <button @onclick="handleTextExtraction" type="button" class="btn btn-primary">
            Extract reasons
            @if (extractionInProgress)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>
            }
        </button>

        <hr/>

        @if (extractionResult != null)
        {
            <label class="fw-bold">Result</label>
            <p>@extractionResult</p>
        }
    </div>
</div>

<div class="card mb-3">
    <h5 class="card-header text-white bg-secondary">Commit Message Dataset</h5>
    <div class="card-body">
        <p>Upload a dataset which contains commit messages to execute instructions on them.</p>

        @if (fileError != null)
        {
            <div class="alert alert-danger p-2" role="alert">
                <span class="oi oi-warning"></span> @fileError
            </div>
        }

        <div class="mb-3">
            <label class="form-label" for="designExtractorFile">Upload file (.tsv)</label>
            <InputFile type="file" class="form-control" id="designExtractorFile" accept=".tsv" OnChange="@handleLoadFile"/>
        </div>

        <div class="mb-3">
            <label class="form-label" for="designExtractorCommand">Enter instructions</label>
            <input type="text" class="form-control" id="designExtractorCommand" @bind="designDecisionCommand"/>
        </div>

        <div class="mb-3 flex flex-row gap-2">
            <button type="button" class="btn btn-primary" @onclick="handleGetReasonsFromTsv" disabled="@(fileName == null || loading)">
                Extract reasons
            </button>
            <button type="button" class="btn btn-secondary" @onclick="downloadTsvAsync" disabled="@(commitResponses == null || commitResponses.Count < 1 || !shouldStopExtracting || loading)">
                Export CSV
            </button>
            <button type="button" class="btn btn-danger" @onclick="handleStopExtracting" disabled="@(commitResponses == null || commitResponses.Count < 1 || shouldStopExtracting)">
                Stop extracting
            </button>
        </div>

        <hr/>

        <table class="table">
            <thead>
            <tr>
                <th>Ref</th>
                <th>Commit</th>
                <th>Response</th>
            </tr>
            </thead>
            <tbody>
            @if (commitResponses != null)
            {
                @for (var i = 0; i < commitResponses.Count; i++)
                {
                    <tr>
                        <td>@i</td>
                        <td>@commitResponses[i].commit</td>
                        <td>@commitResponses[i].response</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

<div class="card mb-3">
    <h5 class="card-header text-white bg-secondary">Text summarization</h5>
    <div class="card-body">
        <p>Make a summary of the commit message containing key elements.</p>

        @if (summarizationError != null)
        {
            <div class="alert alert-danger p-2" role="alert">
                <span class="oi oi-warning"></span> @summarizationError
            </div>
        }

        <button @onclick="handleTextSummarization" type="button" class="btn btn-primary">
            Summarize commit
            @if (summarizationInProgress)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>
            }
        </button>

        <hr/>

        @if (summarizationResult != null)
        {
            <label class="fw-bold">Result</label>
            <p>@summarizationResult</p>
        }
    </div>
</div>

@code
{
    private string? gitCommitMessage { get; set; }

    private string? extractionResult { get; set; }
    private bool extractionInProgress { get; set; }
    private string? extractionError { get; set; }

    private string? summarizationResult { get; set; }
    private bool summarizationInProgress { get; set; }
    private string? summarizationError { get; set; }

    private bool loading { get; set; }
    private string? fileName { get; set; }
    private string? fileError { get; set; }
    private string designDecisionCommand { get; set; } = "The following text describes a change, extract the reason for the change:";
    private bool shouldStopExtracting { get; set; }
    private List<string> tsvCommitMessages { get; set; }
    private List<CommitResponse> commitResponses { get; set; }

    private async Task handleLoadFile(InputFileChangeEventArgs e)
    {
        commitResponses = new List<CommitResponse>();
        tsvCommitMessages = new List<string>();
        fileError = null;
        loading = true;
        try
        {
            var ms = new MemoryStream();
            await e.File.OpenReadStream(50000000L).CopyToAsync(ms);
            fileName = e.File.Name;
            var loopable = System.Text.Encoding.UTF8.GetString(ms.ToArray());

            var lines = loopable.Split(Environment.NewLine);

            var content = "";
            var isMultiline = false;

            for (var i = 0; i < lines.Length; i++)
            {
                if (i == 0) continue;

                var line = lines[i];

                if (!isMultiline)
                {
                    isMultiline = line.StartsWith('"');
                    line = line.Remove(0, 1);
                }

                content += $"{line.Split('\t')[0]} ";

                if (isMultiline)
                {
                    var isEndMultiline = line.EndsWith("\"\r");
                    if (!isEndMultiline && i != lines.Length) continue;

                    content = content.Remove(content.Length - 3);
                    tsvCommitMessages.Add(content);
                    isMultiline = false;
                    content = "";
                }
                else
                {
                    tsvCommitMessages.Add(content);
                    content = "";
                }
            }
        }
        catch
        {
            fileError = "Something went wrong while loading the file";
        }
        finally
        {
            loading = false;
        }
    }

    private void handleStopExtracting()
    {
        shouldStopExtracting = true;
    }

    private async IAsyncEnumerable<CommitResponse> getSummarizationsAsync()
    {
        foreach (var commitMessage in tsvCommitMessages)
        {
            if (shouldStopExtracting) break;
            var cs = new CommitResponse();
            cs.commit = commitMessage;
            try
            {
                var dto = new OpenAIExtractDTO();
                dto.prompt = $"{designDecisionCommand} {cs.commit}";
                var response = await OpenAIService.extractReasons(dto);

                if ((int) response.StatusCode == 200)
                {
                    cs.response = response.Content.choices[0].text;
                }
                else
                {
                    throw new Exception("Invalid response received");
                }
            }
            catch
            {
                cs.response = "";
            }
            yield return cs;
        }
    }

    private async Task handleGetReasonsFromTsv()
    {
        shouldStopExtracting = false;
        commitResponses = new List<CommitResponse>();
        fileError = null;
        loading = true;
        await foreach (var item in getSummarizationsAsync())
        {
            commitResponses.Add(item);
            StateHasChanged();
        }
        loading = false;
    }

    public async Task downloadTsvAsync()
    {
        const char delimiter = '\t';

        var columns = new List<string> {"Reference", "GitCommitMessage", "Response"};

        var tsvFile = string.Join(delimiter, columns);

        for (var i = 0; i < commitResponses.Count; i++)
        {
            var tsvRow = Environment.NewLine;
            var cr = commitResponses[i];
            tsvRow += $"{i}{delimiter}{cr.commit}{delimiter}{cr.response.Replace("\n", "")}";
            tsvFile += tsvRow;
        }

        var date = DateTime.Now.ToString("dd-MM-yyyy");
        await BlazorDownloadFileService.DownloadFileFromText($"export_openai_{date}.tsv", tsvFile, Encoding.ASCII, "text/tsv");
    }

    private async void handleTextExtraction()
    {
        if (gitCommitMessage == null || gitCommitMessage.Length < 1)
        {
            extractionError = "Please paste a commit message.";
            return;
        }

        extractionInProgress = true;
        StateHasChanged();

        var dto = new OpenAIExtractDTO();
        dto.prompt = $"{designDecisionCommand} {gitCommitMessage}";

        var response = await OpenAIService.extractReasons(dto);

        if (((int) response.StatusCode) == 200)
        {
            extractionResult = response.Content.choices[0].text;
            StateHasChanged();
        }
        else
        {
            extractionError = "Error extracting reasons!";
            StateHasChanged();
        }

        extractionInProgress = false;
        StateHasChanged();
    }

    private async void handleTextSummarization()
    {
        if (gitCommitMessage == null || gitCommitMessage.Length < 1)
        {
            summarizationError = "Please paste a commit message.";
            return;
        }

        summarizationInProgress = true;
        StateHasChanged();

        var dto = new OpenAISummarizeDTO();
        dto.prompt = gitCommitMessage;

        var response = await OpenAIService.summarizeText(dto);

        if (((int) response.StatusCode) == 200)
        {
            summarizationResult = response.Content.choices[0].text;
            StateHasChanged();
        }
        else
        {
            summarizationError = "Error extracting reasons!";
            StateHasChanged();
        }

        summarizationInProgress = false;
        StateHasChanged();
    }
}